trigger:
  batch: true
  branches:
    include:
      - master
      - stage
      - release/*
      - develop
      - hotfix/*

variables:
  - group: VARIABLE-ENTORNO-ADMISIONDIGITAL

  - name: Repositorio
    value: "salud/admision-digital/front-admision"

  - name: ImageTag
    value: "_$(Build.BuildId)"

  
  - name: DockerRepositoryProd
    value: prod/admision_digital/achs-fr-admision
  - name: urlOrquestadorPROD
    value: "https://wa-prod-admdig-msorquestador.azurewebsites.net"

pool:
  vmImage: $(vmImageName)

stages:
  - stage: INFO
    displayName: "Building"
    jobs:
      - deployment: Info
        displayName: "Info"
        environment: "Info"
      - job: Build
        displayName: "Info"
        steps:
          - script: |
              echo "TargetBranch" $(System.PullRequest.TargetBranch)
              echo "sourceBranch " $(System.pullRequest.sourceBranch)

  # STAGES

  # DESA #
  - stage: Deploy_DESA
    displayName: "Building Desploy DESA"
    condition: |
      and(
        startsWith(variables['system.pullRequest.sourceBranch'], variables['sourceBranchDesa']),
        eq(variables['Build.Reason'], 'PullRequest')
      )
    jobs:
      - deployment: Deploy
        displayName: "Deploy DESA"
        environment: "Deploy_DESA"
      - job: Build
        displayName: "Deploy_DESA"
        steps:
          - task: Docker@2
            displayName: Build Docker Image
            inputs:
              containerRegistry: $(ContainerRegistryName)
              repository: $(Repositorio)
              command: build
              Dockerfile: ./Dockerfile
              tags: $(ImageTag)
              arguments: --build-arg idAzure=$(azureAdDesarrollo) --build-arg app=$(appNameDESAFront)
          - task: Docker@2
            displayName: Push Docker Image
            inputs:
              containerRegistry: $(ContainerRegistryName)
              repository: $(Repositorio)
              command: push
              tags: $(ImageTag)
          - task: CmdLine@2
            displayName: Get secrets
            inputs:
              script: |
                sed -i "s?imagen?$(ContainerRegistryName).azurecr.io/$(Repositorio):$(ImageTag)?" /home/vsts/work/1/s/manifests/envs/desa/web-front-admision-deployment.yaml
          - task: KubernetesManifest@0
            inputs:
              action: "deploy"
              kubernetesServiceConnection: "AKS-DESA-SALUD-NS-ADMISIONDIGITAL"
              namespace: "admisiondigital"
              manifests: |
                /home/vsts/work/1/s/manifests/envs/desa/web-front-admision-deployment.yaml
                /home/vsts/work/1/s/manifests/envs/desa/web-front-admision-service.yaml
                /home/vsts/work/1/s/manifests/envs/desa/web-front-admision-ingress.yaml
              containers: $(ContainerRegistryName).azurecr.io/$(Repositorio):$(ImageTag)

  # DESA #

  # QA #
  - stage: Deploy_QA
    displayName: "Building Deploy QA"
    condition: |
       and(
         startsWith(variables['system.pullRequest.sourceBranch'], variables['sourceBranchQa']),
         startsWith(variables['system.pullRequest.TargetBranch'], variables['TargetBranchQa']),
         eq(variables['Build.Reason'], 'PullRequest')
       )
    jobs:
      - deployment: Deploy
        displayName: "Deploy QA"
        environment: "Deploy_QA"
      - job: Build
        displayName: "Deploy QA"
        steps:
          - task: CmdLine@2
            displayName: Get secrets
            inputs:
              script: |
                sed -i "s?imagen?$(ContainerRegistryName).azurecr.io/$(Repositorio):$(ImageTag)?" /home/vsts/work/1/s/manifests/envs/qa/web-front-admision-deployment.yaml
          - task: KubernetesManifest@0
            inputs:
              action: "deploy"
              kubernetesServiceConnection: "AKS-QA-SALUD-NS-ADMISIONDIGITAL"
              namespace: "admisiondigital"
              manifests: |
                /home/vsts/work/1/s/manifests/envs/qa/web-front-admision-deployment.yaml
                /home/vsts/work/1/s/manifests/envs/qa/web-front-admision-service.yaml
                /home/vsts/work/1/s/manifests/envs/qa/web-front-admision-ingress.yaml
              containers: $(ContainerRegistryName).azurecr.io/$(Repositorio):$(TagFrontAdmision)
          
  # QA #

  # QAHOTFIX #
  - stage: Deploy_QA_Hotfix
    displayName: "Building Desploy Qa Hotfix"
    condition: |
       and(
         startsWith(variables['system.pullRequest.sourceBranch'], variables['sourceBranchDeployQaHotfix']),
         startsWith(variables['system.pullRequest.TargetBranch'], variables['TargetBranchQa']),
         eq(variables['Build.Reason'], 'PullRequest')
       )
    jobs:
      - deployment: Deploy
        displayName: "Deploy QA Hotfix"
        environment: "Deploy_QA"
      - job: Build
        displayName: "Deploy QA Hotfix"
        steps:
          - task: Docker@2
            displayName: Build Docker Image
            inputs:
              containerRegistry: $(ContainerRegistryName)
              repository: $(Repositorio)
              command: build
              Dockerfile: ./Dockerfile
              tags: $(ImageTag)
              arguments: --build-arg idAzure=$(azureAdQa) --build-arg app=$(appNameQAFront)
          - task: Docker@2
            displayName: Push Docker Image
            inputs:
              containerRegistry: $(ContainerRegistryName)
              repository: $(Repositorio)
              command: push
              tags: $(ImageTag)
          # - task: CmdLine@2
          #   displayName: Get secrets
          #   inputs:
          #     script: |
          #       sed -i "s?imagen?$(ContainerRegistryName).azurecr.io/$(Repositorio):$(ImageTag)?" /home/vsts/work/1/s/manifests/envs/qa/web-front-admision-deployment.yaml
          # - task: KubernetesManifest@0
          #   inputs:
          #     action: "deploy"
          #     kubernetesServiceConnection: "AKS-QA-SALUD-NS-ADMISIONDIGITAL"
          #     namespace: "admisiondigital"
          #     manifests: |
          #       /home/vsts/work/1/s/manifests/envs/qa/web-front-admision-deployment.yaml
          #       /home/vsts/work/1/s/manifests/envs/qa/web-front-admision-service.yaml
          #       /home/vsts/work/1/s/manifests/envs/qa/web-front-admision-ingress.yaml
          #     containers: $(ContainerRegistryName).azurecr.io/$(Repositorio):$(ImageTag)
          - task: AzureWebAppContainer@1
            inputs:
              azureSubscription: $(azureSubcritionQA)
              appName: $(appNameQAFront)
              containers: $(ContainerRegistryName).azurecr.io/$(DockerRepositoryQA):$(ImageTag)
  # QAHOTFIX #

  # PROD #
  - stage: Deploy_PROD
    displayName: "Building Deploy PROD"
    condition: |
      or(
        and(
          startsWith(variables['system.pullRequest.sourceBranch'], variables['sourceBranchProd']),
          startsWith(variables['system.pullRequest.TargetBranch'], variables['TargetBranchProd']),
          eq(variables['Build.Reason'], 'PullRequest')
        ), 
        and(
          startsWith(variables['system.pullRequest.sourceBranch'], variables['sourceBranchDeployProdHotfix']),
          eq(variables['Build.Reason'], 'PullRequest')
        ),        
        and(
          startsWith(variables['system.pullRequest.sourceBranch'], variables['sourceBranchDeployHotfix']),
          eq(variables['Build.Reason'], 'PullRequest')
        )         
       )
    jobs:
      - deployment: Deploy
        displayName: "Deploy PROD"
        environment: "Deploy_PROD"
      - job: Build
        displayName: "Deploy PROD"
        steps:
          - task: Docker@2
            displayName: Build Docker Image
            inputs:
              containerRegistry: $(ContainerRegistryName)
              repository: $(DockerRepositoryProd)
              command: build
              Dockerfile: ./Dockerfile
              tags: $(ImageTag)
              arguments: --build-arg urlOrquestador=$(urlOrquestadorPROD) --build-arg idAzure=$(azureAdProd) --build-arg app=$(appNameProdFront)
          - task: Docker@2
            displayName: Push Docker Image
            inputs:
              containerRegistry: $(ContainerRegistryName)
              repository: $(DockerRepositoryProd)
              command: push
              tags: $(ImageTag)
          - task: AzureWebAppContainer@1
            inputs:
              azureSubscription: $(azureSubcritionProd)
              appName: $(appNameProdFront)
              containers: $(ContainerRegistryName).azurecr.io/$(DockerRepositoryProd):$(ImageTag)
# PROD #

